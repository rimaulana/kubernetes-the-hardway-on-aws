---
AWSTemplateFormatVersion: '2010-09-09'
Description: >-
  Kubernetes Worker Node Instances

Parameters:
  ClusterName:
    Description: The cluster name provided when the cluster was created. If it is incorrect, nodes will not be able to join the cluster.
    Type: String

  NodeSecurityGroup:
    Type: AWS::EC2::SecurityGroup::Id
    Description: Choose security group for worker node

  PrivateSubnets:
    Type: String
    Description: Define private subnets on VPC for proxy server, multiple Subnet Ids separated by comma subnet-123,subnet-456

  KeyName:
    Description: The EC2 Key Pair to allow SSH access to the instances
    Type: AWS::EC2::KeyPair::KeyName
  
  AmiId:
    Type: AWS::EC2::Image::Id
    Description: Define AWS Linux 2 ImageId for bastion host
  
  HostedZoneId:
    Type: String
    Description: Private Route53 hosted zone id
  
  DomainName:
    Type: String
    Default: gresik.io
    Description: DNS name

Resources:
  NodeInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - !Ref NodeInstanceRole

  NodeInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: route53
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - 'route53:ChangeResourceRecordSets'
            Resource: !Sub 'arn:aws:route53:::hostedzone/${HostedZoneId}'
          - Effect: Allow
            Action:
            - 'ec2:DescribeTags'
            Resource: '*'
      - PolicyName: route53-json-download
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - 's3:ListAllMyBuckets'
            Resource: 'arn:aws:s3:::*'
          - Effect: Allow
            Action:
            - 's3:ListBucket'
            - 's3:GetBucketLocation'
            Resource: 'arn:aws:s3:::gresik'
          - Effect: Allow
            Action:
            - 's3:GetObject'
            Resource: 
            - 'arn:aws:s3:::gresik/configs/record.json'
            - 'arn:aws:s3:::gresik/configs/*'
            - 'arn:aws:s3:::gresik/certificates/*'

  LaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: false
      ImageId: !Ref AmiId
      InstanceType: t3.xlarge
      IamInstanceProfile: !Ref NodeInstanceProfile
      KeyName: !Ref KeyName
      SecurityGroups:
      - !Ref NodeSecurityGroup
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 50
            VolumeType: gp2
            DeleteOnTermination: true
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo apt-get update
          sudo apt install python-pip -y
          sudo pip install awscli --upgrade
          sudo apt-get -y install socat conntrack ipset

          instance_id=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)
          ip_addr=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)
          name=$(aws ec2 describe-tags --region ${AWS::Region} --filters "Name=resource-id,Values=$instance_id" 'Name=key,Values=Name' --query 'Tags[].Value' --output text)

          hostnamectl set-hostname $name

          aws s3 cp s3://gresik/configs/record.json /tmp
          sed -i s,HOSTNAME,$name,g /tmp/record.json
          sed -i s,IP_ADDRESS,$ip_addr,g /tmp/record.json

          aws route53 change-resource-record-sets --hosted-zone-id ${HostedZoneId} --change-batch file:///tmp/record.json
  
  AZ1:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      DesiredCapacity: '1'
      LaunchConfigurationName: !Ref LaunchConfig
      MinSize: '1'
      MaxSize: '1'
      VPCZoneIdentifier:
      - Fn::Select:
        - 0
        - Fn::Split:
          - ','
          - !Ref PrivateSubnets
      Tags:
      - Key: Name
        Value: !Sub "node-1.${DomainName}"
        PropagateAtLaunch: true
      - Key: !Sub 'kubernetes.io/cluster/${ClusterName}'
        Value: 'owned'
        PropagateAtLaunch: true
      - Key: auto-delete
        Value: "no"
        PropagateAtLaunch: true
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: true
      AutoScalingRollingUpdate:
        MinInstancesInService: 1
        MaxBatchSize: 5
  
  AZ2:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      DesiredCapacity: '1'
      LaunchConfigurationName: !Ref LaunchConfig
      MinSize: '1'
      MaxSize: '1'
      VPCZoneIdentifier:
      - Fn::Select:
        - 1
        - Fn::Split:
          - ','
          - !Ref PrivateSubnets
      Tags:
      - Key: Name
        Value: !Sub "node-2.${DomainName}"
        PropagateAtLaunch: true
      - Key: !Sub 'kubernetes.io/cluster/${ClusterName}'
        Value: 'owned'
        PropagateAtLaunch: true
      - Key: auto-delete
        Value: "no"
        PropagateAtLaunch: true
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: true
      AutoScalingRollingUpdate:
        MinInstancesInService: 1
        MaxBatchSize: 5
  
  AZ3:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      DesiredCapacity: '1'
      LaunchConfigurationName: !Ref LaunchConfig
      MinSize: '1'
      MaxSize: '1'
      VPCZoneIdentifier:
      - Fn::Select:
        - 2
        - Fn::Split:
          - ','
          - !Ref PrivateSubnets
      Tags:
      - Key: Name
        Value: !Sub "node-3.${DomainName}"
        PropagateAtLaunch: true
      - Key: !Sub 'kubernetes.io/cluster/${ClusterName}'
        Value: 'owned'
        PropagateAtLaunch: true
      - Key: auto-delete
        Value: "no"
        PropagateAtLaunch: true
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: true
      AutoScalingRollingUpdate:
        MinInstancesInService: 1
        MaxBatchSize: 5
